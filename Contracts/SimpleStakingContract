// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;


import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol";

contract SimpleStaking is ERC721Holder {
    IERC20 public constant stakingToken = IERC20(0x3c725134d74D5c45B4E4ABd2e5e2a109b5541288);
    IERC721 public constant angelApesContract = IERC721(0xD4Fc541236927E2EAf8F27606bD7309C1Fc2cbee);

    uint256 totalStakedTokens;

    uint256 public rewardRate = 1;
    uint256 public presaleAngels = 888;   
    
    mapping(address=>uint256) rewardUptill;
    mapping(address=>uint256) stakedBalanceOfUser;
    mapping(address=>uint256) lastActive;


    
    constructor() {}

    function calculateReward() public view returns(uint256){

        uint256 hour = (block.timestamp-lastActive[msg.sender])/8400;
        return (rewardRate*stakedBalanceOfUser[msg.sender]*hour)+rewardUptill[msg.sender];
    }

    //During staking one first needs to approove and later transfer
    function stake(uint _amount) external {
        if(stakedBalanceOfUser[msg.sender]>0){
            //If the user has some staked tokens calculate the reward for that uptill and add to reward map
            rewardUptill[msg.sender]+=calculateReward();
        }
        totalStakedTokens += _amount;
        stakedBalanceOfUser[msg.sender] += _amount;
        lastActive[msg.sender]=block.timestamp;
        stakingToken.transferFrom(msg.sender, address(this), _amount);
    }

    function withdraw(uint _amount) external {
        totalStakedTokens -= _amount;
        stakedBalanceOfUser[msg.sender] -= _amount;
        rewardUptill[msg.sender]+=calculateReward();
        lastActive[msg.sender]=block.timestamp;
        stakingToken.transfer(msg.sender, _amount);
    }

    function getReward() external {
        uint reward = calculateReward();
        lastActive[msg.sender]=block.timestamp;
        stakingToken.transfer(msg.sender, reward);
    }

     function moneyBack(uint _tokenId) external{
         //The user first needs to approove for the contract to accept the nft and transfer money
        require(_tokenId<=presaleAngels,"Only presale angels are eligible for moneyback scheme");
        angelApesContract.safeTransferFrom(msg.sender,address(this),_tokenId);
        (bool sent,) = payable(msg.sender).call{value: 50000000000000000}(""); //0.05 eth
        require(sent, "Failed to send Ether");
    }

    receive() external payable {

    } 
}
